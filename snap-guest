#!/bin/bash
# Requirements: python-virtinst qemu-img libguestfs-mount sed bash

usage() {
cat <<USAGE
usage: $0 options

Simple script for creating copy-on-write QEMU/KVM guests. For the base image
install Fedora or RHEL (compatible), install acpid and ntpd or similar, do not
make any swap partition (use -s option), make sure the hostname is the same
as the vm name and it has "base" in it. Example: rhel-6-base.

You can have more versions of the base image e.g. rhel-6-base-1,
rhel-6-base-2 etc. If you want snap a guest from rhel-6-base, the latest version
(a version with highest suffix number) will be used.

WARNING: This script is for development and testing purposes, it is NOT
recommended to provision production systems with it. You have been warned!

OPTIONS:
  -h             Show this message
  -l             List avaiable images (with "base" in the name)
  -a             List all images
  -b [image]     Base image name (template) - required
  -t [image]     Target image name (and hostname) - required
  -n [network]   Network settings (default: "network=default")
  -k [network2]  Second network NIC settings (none by default)
  -m [MB]        Memory (default: 800 MiB)
  -c [CPUs]      Number of CPUs (default: 1)
  -p [path]      Target images path (default: /var/lib/libvirt/images/)
  -e [path]      Base images path (default: /var/lib/libvirt/images/)
  -d [domain]    Domain suffix like "mycompany.com" (default: none)
  -x [prefix]    Domain prefix like "test-" -> "test-NAME.lan" (default: none)
  -f             Force creating new guest (no questions)
  -w             Add IP address to /etc/hosts (works only with NAT)
  -g             Graphics options passed to virt-install via --graphics
                 (default is vnc,listen=0.0.0.0)
  -s             Swap size (in MB) that is appeded as /dev/sdb to fstab
  -1 [command]   Command to execute during first boot in /root dir
                 (logfile available in /root/firstboot.log)

EXAMPLE:

  $0 -l
  $0 -p /mnt/data/images -l
  $0 -b fedora-17-base -t test-vm -s 4098
  $0 -b fedora-17-base -t test-vm2 -n bridge=br0 -d example.com
  $0 -b rhel-6-base -t test-vm -m 2048 -c 4 -p /mnt/data/images
USAGE
}

# determine script directory
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
SCRIPTDIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

SOURCE_NAME=""
TARGET_NAME=""
NETWORK="network=default"
NETWORK2=""
MEM="800"
SWAP=0
CPUS="1"
IMAGE_DIR="/var/lib/libvirt/images"
BASE_IMAGE_DIR="/var/lib/libvirt/images"
DOMAIN=""
PREFIX=""
FORCE=0
LIST=0
LIST_ALL=0
ADD_IP=0
GRAPHICS_OPTS="vnc,listen=0.0.0.0"
COMMAND=""

while getopts "hlafwb:t:n:m:c:d:x:p:s:k:1:e:g:" opt; do
  case $opt in
    l)
      LIST=1
      ;;
    a)
      LIST_ALL=1
      ;;
    f)
      FORCE=1
      ;;
    w)
      ADD_IP=1
      ;;
    p)
      IMAGE_DIR="$OPTARG"
      ;;
    e)
      BASE_IMAGE_DIR="$OPTARG"
      ;;
    b)
      SOURCE_NAME="$OPTARG"
      ;;
    g)
      GRAPHICS_OPTS="$OPTARG"
      ;;
    t)
      TARGET_NAME="$OPTARG"
      ;;
    n)
      NETWORK="$OPTARG"
      ;;
    k)
      NETWORK2="--network=$OPTARG"
      ;;
    m)
      MEM="$OPTARG"
      ;;
    c)
      CPUS="$OPTARG"
      ;;
    d)
      DOMAIN=".$OPTARG"
      ;;
    x)
      PREFIX="$OPTARG"
      ;;
    s)
      SWAP="$OPTARG"
      ;;
    1)
      COMMAND="$OPTARG"
      ;;
    h)
      usage
      exit
      ;;
    ?)
      echo "Invalid option: $OPTARG" >&2
      usage
      exit
      ;;
  esac
done

[ $LIST -eq 1 ] && ls "$BASE_IMAGE_DIR" | grep '\.img' | grep base | sed 's/\.img//g' && exit 0
[ $LIST_ALL -eq 1 ] && ls "$BASE_IMAGE_DIR" | grep '\.img' | sed 's/\.img//g' && exit 0

if [ -z "$SOURCE_NAME" -o -z "$TARGET_NAME" ]; then
  usage
  exit 1
fi

SOURCE_IMG=$(ls -v1 $BASE_IMAGE_DIR/${SOURCE_NAME}*.img | tail -n1)
TARGET_IMG=$IMAGE_DIR/$TARGET_NAME.img
TARGET_IMG_SWAP=$IMAGE_DIR/$TARGET_NAME-swap.img
MAC="52:54:00$(echo "$(hostname)$TARGET_NAME" | openssl dgst -md5 -binary | hexdump -e '/1 ":%02x"' -n 3)"
HOSTNM="$PREFIX$TARGET_NAME$DOMAIN"

if [ ! -f "$SOURCE_IMG" ]; then
  echo "Base image $SOURCE_IMG not found!"
  exit 1
fi

if [ -f "$TARGET_IMG" ]; then
  echo "Target image already exists!"
  if [ $FORCE -eq 1 ]; then
    REPLY="y"
  else
    read -p "Shutdown and remove host with this name first (y/[n])? "
  fi
  [ "$REPLY" != "y" ] && \
    # need to do it twice (sometimes this fail)
    virsh destroy "$TARGET_NAME" 2>/dev/null; sleep 2s; \
    virsh destroy "$TARGET_NAME" 2>/dev/null; sleep 1s; \
    virsh undefine "$TARGET_NAME"
fi

echo "Creating snapshot guest $TARGET_NAME"

# -- Image Creation --------------

echo "Creating snapshot image"
qemu-img create -f qcow2 -b $SOURCE_IMG $TARGET_IMG

# -- Image Manipulation ----------

export BASE_IMAGE_DIR COMMAND HOSTNM MAC SOURCE_NAME SWAP TARGET_IMG TARGET_NAME
perl -w "$SCRIPTDIR/prepare-image.pl"

# -- Swap Creation --------------

if [ $SWAP -gt 0 ]; then
  qemu-img create -f raw $TARGET_IMG_SWAP ${SWAP}M
  mkswap -f $TARGET_IMG_SWAP
  DISK_SWAP="--disk $TARGET_IMG_SWAP,device=disk,bus=virtio,format=raw"
else
  DISK_SWAP=""
fi

# -- Image Provisioning ---------

echo "Provisioning guest $TARGET_NAME"
echo "Hostname: $HOSTNM"
echo "CPUs:     $CPUS"
echo "Memory:   $MEM MB"
echo "Swap:     $MEM MB"
echo "MAC:      $MAC"
virt-install --vcpus $CPUS \
  --ram $MEM --import \
  --name $TARGET_NAME \
  --disk $TARGET_IMG,device=disk,bus=virtio,format=qcow2 $DISK_SWAP \
  --graphics "$GRAPHICS_OPTS" \
  --noautoconsole --force \
  --network=$NETWORK,mac=$MAC \
  $NETWORK2

# -- IP Determining -------------

if [ $ADD_IP -eq 1 ]; then
  echo "Waiting for IP"
  i=0
  until [ $i -ge 100 ] || IP_LINE=`cat /var/lib/libvirt/dnsmasq/${NETWORK/network=}.leases /var/lib/dnsmasq/dnsmasq.leases 2>/dev/null | grep "$MAC"`; do
    i=$((i + 1))
    sleep 1
  done

  if [[ -n $IP_LINE ]]; then
    IP=`echo  $IP_LINE | awk '{print $3}'`
    if ! grep -q "$HOSTNM\$" /etc/hosts; then
      echo "Writing into /etc/hosts ip: $IP"
      echo "$IP $HOSTNM $TARGET_NAME" >> /etc/hosts
    else
      echo "Host $HOSTNM already in hosts"
      OLD_IP=`grep "$HOSTNM\$" /etc/hosts | head -n 1 | awk '{print $1}'`
      if [[ $IP = $OLD_IP ]]; then
        echo "and these ip's match"
      else
        echo "with different ip: $OLD_IP instead of $IP"
      fi
    fi
  fi
fi

# -- EOF --

